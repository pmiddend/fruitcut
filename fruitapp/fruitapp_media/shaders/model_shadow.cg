struct vertex_outputs
{
	float4 position : POSITION;
	float4 position_parameter : TEXCOORD0;
};

vertex_outputs
vertex_main(
	uniform float4x4 mvp,
	in float3 position)
{
	vertex_outputs outs;
	outs.position = mul(mvp,float4(position,1.0));
	outs.position_parameter = outs.position;
	return
		outs;
}

float4
pixel_main(
	vertex_outputs vertex_data)
	: COLOR
{
	float depth = vertex_data.position_parameter.z / vertex_data.position_parameter.w;
	depth = depth * 0.5 + 0.5;

	float moment1 = depth;
	float moment2 = depth * depth;

	// Adjusting moments (this is sort of bias per pixel) using partial derivative
	/*
	float dx = ddx(depth);
	float dy = ddy(depth);
	*/
	float dx = depth;
	float dy = depth;
	moment2 += 0.25*(dx*dx+dy*dy);

	return
		float4(
		       moment1,
		       moment2,
		       0.0,
		       0.0);
}
