struct vertex_outputs
{
	float4 position : POSITION;
	float2 texture_coordinate : TEXCOORD0;
};

#define NEIGHBORHOOD_SIZE 5

float distributions[NEIGHBORHOOD_SIZE] = { 0.0280412,0.233924,0.474425,0.233924,0.0280412 };

vertex_outputs
vertex_main(
	in float2 position : POSITION)
{
	vertex_outputs outs;
	outs.position = float4(position.xy,0.0,1.0);
	outs.texture_coordinate = (position.xy + float2(1.0,1.0))/2.0;
	return
		outs;
}

float4
pixel_main(
	vertex_outputs vertex_data,
	uniform sampler2D input_texture)
	: COLOR
{
	float4 sum =
		0.0;

	for(int i = 0; i < NEIGHBORHOOD_SIZE; ++i)
	{
		float2
			texture_size =
				tex2Dsize(
					input_texture,
					// LOD
					0).xy,
			current_absolute_texcoord =
				texture_size * vertex_data.texture_coordinate,
			current_texcoord =
				(current_absolute_texcoord - float2((float)(i - 2),0.0)) /
				texture_size;

		sum +=
			distributions[i] *
			tex2D(
				input_texture,
				current_texcoord);
	}

	return
		sum;
}
