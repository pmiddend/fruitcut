struct vertex_outputs
{
	float4 position : POSITION;
	float2 texture_coordinates : TEXCOORD0;
	float4 shadow_texture_coordinates : TEXCOORD1;
};

vertex_outputs
vertex_main(
	uniform float4x4 mvp,
	uniform float4x4 shadow_mvp,
	in float2 position : POSITION,
	in float2 texture_coordinates : TEXCOORD0)
{
	vertex_outputs outs;
	outs.position = mul(mvp,float4(position.xy,0.0,1.0));
	outs.texture_coordinates = texture_coordinates;
	outs.shadow_texture_coordinates = mul(shadow_mvp,float4(position.xy,0.0,1.0));
	return
		outs;
}

float
chebyshev_upper_bound(
	float4 coord,
	uniform sampler2D shadow_texture)
{
	// We retrive the two moments previously stored (depth and
	// depth*depth)
	float2 moments = tex2D(shadow_texture,coord.xy).rg;

	if (moments.x == 1.0)
		return 0.0;

	// Surface is fully lit. as the current fragment is before the light
	// occluder
	if (coord.z <= moments.x)
		return 1.0;

	// The fragment is either in shadow or penumbra. We now use
	// chebyshev's upperBound to check How likely this pixel is to be
	// lit (p_max)
	float variance = moments.y - (moments.x*moments.x);
	variance = max(variance,0.00002);
	//variance = max(variance,0.002);
	float d = coord.z - moments.x;
	float p_max = variance / (variance + d*d);

	return p_max;
}

float4
pixel_main(
	vertex_outputs vertex_data,
	uniform sampler2D input_texture,
	uniform sampler2D shadow_texture)
	: COLOR
{
	vec4 real_shadow_coord =
		vertex_data.shadow_texture_coordinates / vertex_data.shadow_texture_coordinates.w * 0.5 + 0.5;

	float shadow =
		chebyshev_upper_bound(
			real_shadow_coord,
			shadow_texture);

	return
		float4(
			max(
			    0.5,
			    (1.0 - shadow)) *
			tex2D(
				input_texture,
				vertex_data.texture_coordinates).xyz,
			1.0);
}
